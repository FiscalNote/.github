name: FiscalNote Mule Deploy to STAGING Workflow

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:
    inputs:
      applicationName:
        description: 'Application name (eg: "fn-stakeholders-system-api")'
        required: true
      majorVersion:
        description: 'Major version number (eg: "v1")'
        required: true

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest

    env:
      ## Cloudhub Properties -- Reference: https://docs.mulesoft.com/mule-runtime/4.3/deploy-to-cloudhub
      CLOUDHUB_APPLICATION_NAME: ${{ github.event.inputs.applicationName }}-${{ github.event.inputs.majorVersion }}-stg
      CLOUDHUB_ENVIRONMENT: staging
      CLOUDHUB_WORKERS: 1
      CLOUDHUB_WORKER_TYPE: Micro
      CLOUDHUB_REGION: us-east-1
      CLOUDHUB_BUSINESS_GROUP_ID: 45e92f98-058f-4716-850d-bba6d068e4da
      CLOUDHUB_CONNECTED_APP_CLIENT_ID: ${{ secrets.CLOUDHUB_API_TEAM_CONNECTED_APP_CLIENT_ID_STG }}
      CLOUDHUB_CONNECTED_APP_CLIENT_SECRET: ${{ secrets.CLOUDHUB_API_TEAM_CONNECTED_APP_CLIENT_SECRET_STG }}
      ANYPOINT_PLATFORM_CLIENT_ID: ${{ secrets.CLOUDHUB_API_TEAM_ANYPOINT_PLATFORM_CLIENT_ID_STG }}
      ANYPOINT_PLATFORM_CLIENT_SECRET: ${{ secrets.CLOUDHUB_API_TEAM_ANYPOINT_PLATFORM_CLIENT_SECRET_STG }}
      ANYPOINT_PLATFORM_ANALYTICS_AGENT_ENABLED: true

      ## Mulesoft Nexus Repository Credentials
      MULE_NEXUS_USERNAME: ${{ secrets.MULE_NEXUS_USERNAME }}
      MULE_NEXUS_PASSWORD: ${{ secrets.MULE_NEXUS_PASSWORD }}

      ## App Specific Properties

      # Environment Specific
      MULE_KEY: ${{ secrets.MULE_KEY_STG }}
      MULE_ENV: staging
      MULE_RUNTIME: 4.3.0
    
      
    if: github.event.pull_request.merged == true # only merged pull requests must trigger this job

    steps:
      - name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

      - name: Merge main into develop branch
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: main
          base: develop
          title: Merge main into develop branch
          body: |
            This PR merges the main branch back into develop.
            This happens to ensure that the updates that happend on the release branch.

      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/settings.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Retrieve Exchange access token
        run: |
          export EXCHANGE_ACCESS_TOKEN=$(curl -s "https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token" \
            -X POST -H "Content-Type: application/json" \
            -d "{\"grant_type\": \"client_credentials\", \"client_id\": \"$CLOUDHUB_CONNECTED_APP_CLIENT_ID\", \"client_secret\": \"$CLOUDHUB_CONNECTED_APP_CLIENT_SECRET\"}" \
            | sed -n 's|.*"access_token":"\([^"]*\)".*|\1|p')
          echo EXCHANGE_API_TEAM_ACCESSS_TOKEN=$EXCHANGE_ACCESS_TOKEN >> $GITHUB_ENV
          echo EXCHANGE_CORE_ACCESS_TOKEN=$EXCHANGE_ACCESS_TOKEN >> $GITHUB_ENV

      - name: Build and test
        run: mvn clean package 
          -s settings.xml 
          -Dmule.key="$MULE_KEY"

      - name: Deploy to Cloudhub
        run: mvn deploy 
          -s settings.xml 
          -DmuleDeploy 
          -DskipTests
          -Dmule.key="$MULE_KEY" 
          -Dmule.env="$MULE_ENV"
          -Dmule.runtime="$MULE_RUNTIME"
          -Dcloudhub.applicationName="$CLOUDHUB_APPLICATION_NAME" 
          -Dcloudhub.environment="$CLOUDHUB_ENVIRONMENT" 
          -Dcloudhub.workers="$CLOUDHUB_WORKERS" 
          -Dcloudhub.workerType="$CLOUDHUB_WORKER_TYPE" 
          -Dcloudhub.region="$CLOUDHUB_REGION" 
          -Dcloudhub.businessGroupId="$CLOUDHUB_BUSINESS_GROUP_ID" 
          -Dcloudhub.connectedAppClientId="$CLOUDHUB_CONNECTED_APP_CLIENT_ID" 
          -Dcloudhub.connectedAppClientSecret="$CLOUDHUB_CONNECTED_APP_CLIENT_SECRET" 
          -Dcloudhub.environment.clientId="$ANYPOINT_PLATFORM_CLIENT_ID" 
          -Dcloudhub.environment.clientSecret="$ANYPOINT_PLATFORM_CLIENT_SECRET" 
          -Dcloudhub.environment.analyticsAgentEnabled="$ANYPOINT_PLATFORM_ANALYTICS_AGENT_ENABLED"   
          